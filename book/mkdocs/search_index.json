{
    "docs": [
        {
            "location": "/",
            "text": "Elixir \u5b78\u7fd2\u7b46\u8a18\n\n\n\u9019\u662f\u5b78\u7fd2\u300c\nElixir\n\u300d\u7684\u7c21\u55ae\u7d00\u9304\u3002\n\n\n\u53e6\u5916\u59ca\u59b9\u7bc7\u300c\nErlang \u5b78\u7fd2\u7b46\u8a18\n\u300d\u3002\n\n\nWikipedia\n\n\n\n\nWikipedia / \nElixir (programming language)\n\n\n\u7dad\u57fa\u767e\u79d1 / \nElixir\n\n\n\n\n\u5b78\u7fd2\u5c0e\u8b80\n\n\n\n\nLearning Resources\n\n\nGetting Started\n\n\nMix and OTP\n\n\nDocumentation\n\n\n\n\nGithub\n\n\n\n\nelixir-lang\n\n\nelixir-lang / \nelixir\n\n\nelixir-lang / \nelixir-lang.github.com\n\n\nelixir-lang / \ndocs\n\n\n\n\n\u5957\u4ef6\u5eab\n\n\n\n\nHex.pm\n\n\n\n\n\u76f8\u95dc\u5f71\u7247\n\n\n\n\nElixir - A modern approach to programming for the Erlang VM \n / Jos\u00e9 Valim",
            "title": "\u9996\u9801"
        },
        {
            "location": "/#elixir",
            "text": "\u9019\u662f\u5b78\u7fd2\u300c Elixir \u300d\u7684\u7c21\u55ae\u7d00\u9304\u3002  \u53e6\u5916\u59ca\u59b9\u7bc7\u300c Erlang \u5b78\u7fd2\u7b46\u8a18 \u300d\u3002",
            "title": "Elixir \u5b78\u7fd2\u7b46\u8a18"
        },
        {
            "location": "/#wikipedia",
            "text": "Wikipedia /  Elixir (programming language)  \u7dad\u57fa\u767e\u79d1 /  Elixir",
            "title": "Wikipedia"
        },
        {
            "location": "/#_1",
            "text": "Learning Resources  Getting Started  Mix and OTP  Documentation",
            "title": "\u5b78\u7fd2\u5c0e\u8b80"
        },
        {
            "location": "/#github",
            "text": "elixir-lang  elixir-lang /  elixir  elixir-lang /  elixir-lang.github.com  elixir-lang /  docs",
            "title": "Github"
        },
        {
            "location": "/#_2",
            "text": "Hex.pm",
            "title": "\u5957\u4ef6\u5eab"
        },
        {
            "location": "/#_3",
            "text": "Elixir - A modern approach to programming for the Erlang VM   / Jos\u00e9 Valim",
            "title": "\u76f8\u95dc\u5f71\u7247"
        },
        {
            "location": "/content/start/install-erlang/",
            "text": "\u5b89\u88dd erlang\n\n\n\u5b89\u88dd\u6b65\u9a5f\u53c3\u8003\u6587\u7ae0\n\n\n\n\nErlang / \ndownloads\n\n\nElixir / \ninstall\n\n\nPhoenix Framework / \ninstallation\n\n\nasdf\n\n\n\n\n\u76ee\u6a19\u74b0\u5883\n\n\n\n\nXubuntu 14.04 64\u4f4d\u5143\n\n\n\n\n\u4e8b\u524d\u5b89\u88dd\u7de8\u8b6f\u6240\u9700\u7684\u5957\u4ef6\n\n\n\u57f7\u884c\n\n\n$ sudo apt-get install build-essential automake autoconf libreadline-dev libncurses-dev libssl-dev libyaml-dev libxslt-dev libffi-dev libtool unixodbc-dev\n\n\n\n\n\u5b89\u88dd git\n\n\n\u57f7\u884c\n\n\n$ sudo apt-get install git\n\n\n\n\n\u5b89\u88dd asdf\n\n\n\u4e0a\u9762\u4e86\u53c3\u8003\u6587\u7ae0\u6709\u5217\u4e86\u4e0d\u540c\u7a2e\u7684\u5b89\u88dd\u65b9\u5f0f\uff0c\u6211\u9078\u64c7\u9019\u88e1\u300c\nCompiling with version managers\n\u300d\u63d0\u5230\u7684\u300c\nasdf\n\u300d\u3002\n\n\n\u4ee5\u4e0b\u662f\u53c3\u8003\u6b65\u9a5f\n\n\nclone asdf\n\n\n$ git clone https://github.com/HashNuke/asdf.git ~/.asdf\n\n\n\n\n\u8a2d\u5b9a asdf source\n\n\n\u57f7\u884c\n\n\necho '# source asdf ' \n ~/.bashrc\necho 'source $HOME/.asdf/asdf.sh' \n ~/.bashrc\necho 'source $HOME/.asdf/completions/asdf.bash' \n ~/.bashrc\n\n\n\n\n\u91cd\u65b0\u9032\u5165bash\u5f8c\n\n\n\u89c0\u770b asdf \u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ asdf --version\n\n\n\n\n\u986f\u793a\n\n\n0.1\n\n\n\n\n\u89c0\u770b asdf \u4f7f\u7528\u8aaa\u660e\n\n\n\u57f7\u884c\n\n\n$ asdf -h\n\n\n\n\n\u986f\u793a\n\n\nversion: 0.1\n\nMANAGE PLUGINS\n  asdf plugin-add \nname\n \ngit-url\n     Add git repo as plugin\n  asdf plugin-list                     List installed plugins\n  asdf plugin-remove \nname\n            Remove plugin and package versions\n  asdf plugin-update \nname\n            Update plugin\n  asdf plugin-update --all             Update all plugins\n\n\nMANAGE PACKAGES\n  asdf install \nname\n \nversion\n        Install a specific version of a package or,\n                                       with no arguments, install all the package\n                                       versions listed in the .tool-versions file\n  asdf uninstall \nname\n \nversion\n      Remove a specific version of a package\n  asdf which \nname\n                    Display version set or being used for package\n  asdf where \nname\n \nversion\n          Display install path for an installed version\n  asdf list \nname\n                     List installed versions of a package\n  asdf list-all \nname\n                 List all versions of a package\n\n\nUTILS\n  asdf reshim \nname\n \nversion\n         Recreate shims for version of a package\n\n\n\nLate but latest\n\n-- Rajinikanth\n\n\n\n\n\u5b89\u88dd asdf plugin\n\n\n\u57f7\u884c\n\n\nasdf plugin-add erlang https://github.com/HashNuke/asdf-erlang.git\nasdf plugin-add elixir https://github.com/HashNuke/asdf-elixir.git\nasdf plugin-add lua https://github.com/Stratus3D/asdf-lua.git\nasdf plugin-add modejs https://github.com/HashNuke/asdf-nodejs.git\nasdf plugin-add ruby https://github.com/HashNuke/asdf-ruby.git\n\n\n\n\n\n\n\u4e0a\u9762\u53ea\u8981\u57f7\u884c\u524d\u9762\u5169\u884c\u5c31\u884c\u4e86\uff0c\u5176\u4ed6\u7684\u662f\u9806\u624b\u7de8\u8f2f\uff0c\u53ef\u4ee5\u53c3\u8003\u300c\nasdf / Add a plugin\n\u300d\uff0c\u5176\u4e2d\u6709\u8868\u683c\u53ef\u4ee5\u53c3\u8003\u3002\n\n\n\n\n\u89c0\u770b asdf \u76ee\u524d\u6709\u5b89\u88dd\u90a3\u4e9b plugin\n\n\n\u57f7\u884c\n\n\n$ asdf plugin-list\n\n\n\n\n\u986f\u793a\n\n\nelixir\nerlang\nlua\nnodejs\nruby\n\n\n\n\n\u5b89\u88dd erlang\n\n\n\u5229\u7528 asdf \u5b89\u88dd erlang\n\n\n\u89c0\u770b\u76ee\u524d\u53ef\u4ee5\u5b89\u88dd\u7684 erlang \u6709\u90a3\u4e9b\u7248\u672c\n\n\n$ asdf list-all erlang\n\n\n\n\n\u986f\u793a\n\n\n18.2.1\n18.1\n18.0\n17.5\n17.4\n17.3\n17.1\n17.0\n\n\n\n\n\n\n\u4e0a\u9762\u7684\u7d50\u679c\u5c31\u662f\u300c\n~/.asdf/plugins/erlang/bin/list-all\n\u300d\u7684\u8a2d\u5b9a\n\n\n\n\n\u5b89\u88dd erlang 18.2.1 \u9019\u500b\u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ asdf install erlang 18.2.1\n\n\n\n\n\u89c0\u770b\u76ee\u524d erlang \u5df2\u5b89\u88dd\u7684\u7248\u672c\u5217\u8868\n\n\n\u57f7\u884c\n\n\n$ asdf list erlang\n\n\n\n\n\u986f\u793a\n\n\n18.2.1\n\n\n\n\n\u8a2d\u5b9a global \u4f7f\u7528 erlang \u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ echo 'erlang 18.2.1' \n $HOME/.tool-versions\n\n\n\n\n\u89c0\u770b\u300c$HOME/.tool-versions\u300d\n\n\n\u57f7\u884c\n\n\n$ cat $HOME/.tool-versions\n\n\n\n\n\u986f\u793a\n\n\nerlang 18.2.1\n\n\n\n\n\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u57f7\u884c erl \u4e86\n\n\n\u57f7\u884c\n\n\n$ erl\n\n\n\n\n\u986f\u793a\n\n\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]\n\nEshell V7.2.1  (abort with ^G)\n1\n\n\n\n\n\n\n\u300c.tool-versions\u300d\uff0c\u9664\u4e86\u53ef\u4ee5\u653e\u5728\u300c$HOME\u300d\u5e95\u4e0b\uff0c\u7576\u4f5cglobal\u7684\u8a2d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6bcf\u500b\u5c08\u6848\u5efa\u7acb\u300c.tool-versions\u300d\u9019\u500b\u6a94\u6848\uff0c\u6307\u5b9aerlang\u8981\u4f7f\u7528\u7684\u7248\u672c\u3002",
            "title": "\u5b89\u88dd erlang"
        },
        {
            "location": "/content/start/install-erlang/#erlang",
            "text": "",
            "title": "\u5b89\u88dd erlang"
        },
        {
            "location": "/content/start/install-erlang/#_1",
            "text": "Erlang /  downloads  Elixir /  install  Phoenix Framework /  installation  asdf",
            "title": "\u5b89\u88dd\u6b65\u9a5f\u53c3\u8003\u6587\u7ae0"
        },
        {
            "location": "/content/start/install-erlang/#_2",
            "text": "Xubuntu 14.04 64\u4f4d\u5143",
            "title": "\u76ee\u6a19\u74b0\u5883"
        },
        {
            "location": "/content/start/install-erlang/#_3",
            "text": "\u57f7\u884c  $ sudo apt-get install build-essential automake autoconf libreadline-dev libncurses-dev libssl-dev libyaml-dev libxslt-dev libffi-dev libtool unixodbc-dev",
            "title": "\u4e8b\u524d\u5b89\u88dd\u7de8\u8b6f\u6240\u9700\u7684\u5957\u4ef6"
        },
        {
            "location": "/content/start/install-erlang/#git",
            "text": "\u57f7\u884c  $ sudo apt-get install git",
            "title": "\u5b89\u88dd git"
        },
        {
            "location": "/content/start/install-erlang/#asdf",
            "text": "\u4e0a\u9762\u4e86\u53c3\u8003\u6587\u7ae0\u6709\u5217\u4e86\u4e0d\u540c\u7a2e\u7684\u5b89\u88dd\u65b9\u5f0f\uff0c\u6211\u9078\u64c7\u9019\u88e1\u300c Compiling with version managers \u300d\u63d0\u5230\u7684\u300c asdf \u300d\u3002  \u4ee5\u4e0b\u662f\u53c3\u8003\u6b65\u9a5f",
            "title": "\u5b89\u88dd asdf"
        },
        {
            "location": "/content/start/install-erlang/#clone-asdf",
            "text": "$ git clone https://github.com/HashNuke/asdf.git ~/.asdf",
            "title": "clone asdf"
        },
        {
            "location": "/content/start/install-erlang/#asdf-source",
            "text": "\u57f7\u884c  echo '# source asdf '   ~/.bashrc\necho 'source $HOME/.asdf/asdf.sh'   ~/.bashrc\necho 'source $HOME/.asdf/completions/asdf.bash'   ~/.bashrc  \u91cd\u65b0\u9032\u5165bash\u5f8c",
            "title": "\u8a2d\u5b9a asdf source"
        },
        {
            "location": "/content/start/install-erlang/#asdf_1",
            "text": "\u57f7\u884c  $ asdf --version  \u986f\u793a  0.1",
            "title": "\u89c0\u770b asdf \u7248\u672c"
        },
        {
            "location": "/content/start/install-erlang/#asdf_2",
            "text": "\u57f7\u884c  $ asdf -h  \u986f\u793a  version: 0.1\n\nMANAGE PLUGINS\n  asdf plugin-add  name   git-url      Add git repo as plugin\n  asdf plugin-list                     List installed plugins\n  asdf plugin-remove  name             Remove plugin and package versions\n  asdf plugin-update  name             Update plugin\n  asdf plugin-update --all             Update all plugins\n\n\nMANAGE PACKAGES\n  asdf install  name   version         Install a specific version of a package or,\n                                       with no arguments, install all the package\n                                       versions listed in the .tool-versions file\n  asdf uninstall  name   version       Remove a specific version of a package\n  asdf which  name                     Display version set or being used for package\n  asdf where  name   version           Display install path for an installed version\n  asdf list  name                      List installed versions of a package\n  asdf list-all  name                  List all versions of a package\n\n\nUTILS\n  asdf reshim  name   version          Recreate shims for version of a package Late but latest \n-- Rajinikanth",
            "title": "\u89c0\u770b asdf \u4f7f\u7528\u8aaa\u660e"
        },
        {
            "location": "/content/start/install-erlang/#asdf-plugin",
            "text": "\u57f7\u884c  asdf plugin-add erlang https://github.com/HashNuke/asdf-erlang.git\nasdf plugin-add elixir https://github.com/HashNuke/asdf-elixir.git\nasdf plugin-add lua https://github.com/Stratus3D/asdf-lua.git\nasdf plugin-add modejs https://github.com/HashNuke/asdf-nodejs.git\nasdf plugin-add ruby https://github.com/HashNuke/asdf-ruby.git   \u4e0a\u9762\u53ea\u8981\u57f7\u884c\u524d\u9762\u5169\u884c\u5c31\u884c\u4e86\uff0c\u5176\u4ed6\u7684\u662f\u9806\u624b\u7de8\u8f2f\uff0c\u53ef\u4ee5\u53c3\u8003\u300c asdf / Add a plugin \u300d\uff0c\u5176\u4e2d\u6709\u8868\u683c\u53ef\u4ee5\u53c3\u8003\u3002",
            "title": "\u5b89\u88dd asdf plugin"
        },
        {
            "location": "/content/start/install-erlang/#asdf-plugin_1",
            "text": "\u57f7\u884c  $ asdf plugin-list  \u986f\u793a  elixir\nerlang\nlua\nnodejs\nruby",
            "title": "\u89c0\u770b asdf \u76ee\u524d\u6709\u5b89\u88dd\u90a3\u4e9b plugin"
        },
        {
            "location": "/content/start/install-erlang/#erlang_1",
            "text": "\u5229\u7528 asdf \u5b89\u88dd erlang",
            "title": "\u5b89\u88dd erlang"
        },
        {
            "location": "/content/start/install-erlang/#erlang_2",
            "text": "$ asdf list-all erlang  \u986f\u793a  18.2.1\n18.1\n18.0\n17.5\n17.4\n17.3\n17.1\n17.0   \u4e0a\u9762\u7684\u7d50\u679c\u5c31\u662f\u300c ~/.asdf/plugins/erlang/bin/list-all \u300d\u7684\u8a2d\u5b9a",
            "title": "\u89c0\u770b\u76ee\u524d\u53ef\u4ee5\u5b89\u88dd\u7684 erlang \u6709\u90a3\u4e9b\u7248\u672c"
        },
        {
            "location": "/content/start/install-erlang/#erlang-1821",
            "text": "\u57f7\u884c  $ asdf install erlang 18.2.1",
            "title": "\u5b89\u88dd erlang 18.2.1 \u9019\u500b\u7248\u672c"
        },
        {
            "location": "/content/start/install-erlang/#erlang_3",
            "text": "\u57f7\u884c  $ asdf list erlang  \u986f\u793a  18.2.1",
            "title": "\u89c0\u770b\u76ee\u524d erlang \u5df2\u5b89\u88dd\u7684\u7248\u672c\u5217\u8868"
        },
        {
            "location": "/content/start/install-erlang/#global-erlang",
            "text": "\u57f7\u884c  $ echo 'erlang 18.2.1'   $HOME/.tool-versions  \u89c0\u770b\u300c$HOME/.tool-versions\u300d  \u57f7\u884c  $ cat $HOME/.tool-versions  \u986f\u793a  erlang 18.2.1  \u9019\u6642\u5019\u5c31\u53ef\u4ee5\u57f7\u884c erl \u4e86  \u57f7\u884c  $ erl  \u986f\u793a  Erlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]\n\nEshell V7.2.1  (abort with ^G)\n1   \u300c.tool-versions\u300d\uff0c\u9664\u4e86\u53ef\u4ee5\u653e\u5728\u300c$HOME\u300d\u5e95\u4e0b\uff0c\u7576\u4f5cglobal\u7684\u8a2d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6bcf\u500b\u5c08\u6848\u5efa\u7acb\u300c.tool-versions\u300d\u9019\u500b\u6a94\u6848\uff0c\u6307\u5b9aerlang\u8981\u4f7f\u7528\u7684\u7248\u672c\u3002",
            "title": "\u8a2d\u5b9a global \u4f7f\u7528 erlang \u7248\u672c"
        },
        {
            "location": "/content/start/install-elixir/",
            "text": "\u5b89\u88dd elixir\n\n\n\u5b89\u88dd elixir\n\n\n\u5229\u7528 asdf \u5b89\u88dd elixir\uff0c\u4e00\u4e9b\u6e96\u5099\u5de5\u4f5c\uff0c\u8acb\u53c3\u8003\u4e0a\u4e00\u7bc7\u300c\n\u5b89\u88dd erlang\n\u300d\u7684\u524d\u534a\u6bb5\u3002\n\n\n\u89c0\u770b\u76ee\u524d\u53ef\u4ee5\u5b89\u88dd\u7684 elixir \u6709\u90a3\u4e9b\u7248\u672c\n\n\n$ asdf list-all elixir\n\n\n\n\n\u986f\u793a\n\n\n1.2.2\n1.2.1\n1.2.0\n1.1.1\n1.1.0\n1.0.5\n1.0.4\n1.0.2\n1.0.1\n1.0.0\n\n\n\n\n\n\n\u4e0a\u9762\u7684\u7d50\u679c\u5c31\u662f\u300c\n~/.asdf/plugins/elixir/bin/list-all\n\u300d\u7684\u8a2d\u5b9a\n\n\n\n\n\u5b89\u88dd elixir 1.2.2 \u9019\u500b\u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ asdf install elixir 1.2.2\n\n\n\n\n\u89c0\u770b\u76ee\u524d elixir \u5df2\u5b89\u88dd\u7684\u7248\u672c\u5217\u8868\n\n\n\u57f7\u884c\n\n\n$ asdf list elixir\n\n\n\n\n\u986f\u793a\n\n\n1.2.2\n\n\n\n\n\u8a2d\u5b9a global \u4f7f\u7528 elixir \u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ echo 'elixir 1.2.2' \n $HOME/.tool-versions\n\n\n\n\n\u89c0\u770b\u300c$HOME/.tool-versions\u300d\n\n\n\u57f7\u884c\n\n\n$ cat $HOME/.tool-versions\n\n\n\n\n\u986f\u793a\n\n\nerlang 18.2.1\nelixir 1.2.2\n\n\n\n\n\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u57f7\u884c iex \u4e86\n\n\n\u57f7\u884c\n\n\n$ iex\n\n\n\n\n\u986f\u793a\n\n\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]\n\nInteractive Elixir (1.2.2) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)\n\n\n\n\n\n\n\u300c.tool-versions\u300d\uff0c\u9664\u4e86\u53ef\u4ee5\u653e\u5728\u300c$HOME\u300d\u5e95\u4e0b\uff0c\u7576\u4f5cglobal\u7684\u8a2d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6bcf\u500b\u5c08\u6848\u5efa\u7acb\u300c.tool-versions\u300d\u9019\u500b\u6a94\u6848\uff0c\u6307\u5b9aelixir\u8981\u4f7f\u7528\u7684\u7248\u672c\u3002",
            "title": "\u5b89\u88dd elixir"
        },
        {
            "location": "/content/start/install-elixir/#elixir",
            "text": "",
            "title": "\u5b89\u88dd elixir"
        },
        {
            "location": "/content/start/install-elixir/#elixir_1",
            "text": "\u5229\u7528 asdf \u5b89\u88dd elixir\uff0c\u4e00\u4e9b\u6e96\u5099\u5de5\u4f5c\uff0c\u8acb\u53c3\u8003\u4e0a\u4e00\u7bc7\u300c \u5b89\u88dd erlang \u300d\u7684\u524d\u534a\u6bb5\u3002",
            "title": "\u5b89\u88dd elixir"
        },
        {
            "location": "/content/start/install-elixir/#elixir_2",
            "text": "$ asdf list-all elixir  \u986f\u793a  1.2.2\n1.2.1\n1.2.0\n1.1.1\n1.1.0\n1.0.5\n1.0.4\n1.0.2\n1.0.1\n1.0.0   \u4e0a\u9762\u7684\u7d50\u679c\u5c31\u662f\u300c ~/.asdf/plugins/elixir/bin/list-all \u300d\u7684\u8a2d\u5b9a",
            "title": "\u89c0\u770b\u76ee\u524d\u53ef\u4ee5\u5b89\u88dd\u7684 elixir \u6709\u90a3\u4e9b\u7248\u672c"
        },
        {
            "location": "/content/start/install-elixir/#elixir-122",
            "text": "\u57f7\u884c  $ asdf install elixir 1.2.2",
            "title": "\u5b89\u88dd elixir 1.2.2 \u9019\u500b\u7248\u672c"
        },
        {
            "location": "/content/start/install-elixir/#elixir_3",
            "text": "\u57f7\u884c  $ asdf list elixir  \u986f\u793a  1.2.2",
            "title": "\u89c0\u770b\u76ee\u524d elixir \u5df2\u5b89\u88dd\u7684\u7248\u672c\u5217\u8868"
        },
        {
            "location": "/content/start/install-elixir/#global-elixir",
            "text": "\u57f7\u884c  $ echo 'elixir 1.2.2'   $HOME/.tool-versions  \u89c0\u770b\u300c$HOME/.tool-versions\u300d  \u57f7\u884c  $ cat $HOME/.tool-versions  \u986f\u793a  erlang 18.2.1\nelixir 1.2.2  \u9019\u6642\u5019\u5c31\u53ef\u4ee5\u57f7\u884c iex \u4e86  \u57f7\u884c  $ iex  \u986f\u793a  Erlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]\n\nInteractive Elixir (1.2.2) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)   \u300c.tool-versions\u300d\uff0c\u9664\u4e86\u53ef\u4ee5\u653e\u5728\u300c$HOME\u300d\u5e95\u4e0b\uff0c\u7576\u4f5cglobal\u7684\u8a2d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6bcf\u500b\u5c08\u6848\u5efa\u7acb\u300c.tool-versions\u300d\u9019\u500b\u6a94\u6848\uff0c\u6307\u5b9aelixir\u8981\u4f7f\u7528\u7684\u7248\u672c\u3002",
            "title": "\u8a2d\u5b9a global \u4f7f\u7528 elixir \u7248\u672c"
        },
        {
            "location": "/content/explore/package-elixir/",
            "text": "elixir \u5957\u4ef6\u63a2\u7d22\n\n\n\u57f7\u884c\n\n\n$ tree ~/.asdf/installs/elixir/1.2.2/\n\n\n\n\n\u986f\u793a\n\n\n/home/user/.asdf/installs/elixir/1.2.2/\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mix\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mix.bat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix.ps1\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eex\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 eex.app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.Compiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.Engine.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.SmartEngine.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.SyntaxError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Elixir.EEx.Tokenizer.beam\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Access.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Agent.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Agent.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_aliases.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir.app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Application.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ArgumentError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ArithmeticError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadArityError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadFunctionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadMapError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadStructError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Base.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Behaviour.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_bitstring.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Bitwise.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_bootstrap.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CaseClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_clauses.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Code.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Code.LoadError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_code_server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CompileError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_compiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CondClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_counter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def_defaults.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def_overridable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Dict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_dispatch.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.EmptyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.GenEvent.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.OutOfBoundsError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_env.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ErlangError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_errors.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Exception.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_exp.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_exp_clauses.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.CopyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Stat.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_fn.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_for.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.FunctionClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenEvent.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenEvent.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenServer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_import.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Algebra.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Any.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Opts.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.PID.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Reference.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Regex.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_interpolation.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.Docs.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.Sequence.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.StreamError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.CLI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ErrorHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.LexicalTracker.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ParallelCompiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ParallelRequire.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.SpecialForms.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.Typespec.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.Utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.KeyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Keyword.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_lexical.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_locals.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Macro.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Macro.Env.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.MatchError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_module.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Module.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Module.LocalsTracker.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Node.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.OptionParser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_parser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Path.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Path.Wildcard.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Process.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Protocol.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Protocol.UndefinedError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_quote.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Record.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Record.Extractor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Regex.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Regex.CompileError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_rewrite.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.RuntimeError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_scope.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Set.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Stream.Reducers.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.URI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Graphemes.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.StringIO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Normalizer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Unicode.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_sup.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.Default.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.Spec.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.SyntaxError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.System.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.SystemLimitError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.Supervised.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.Supervisor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_tokenizer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.TokenMissingError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_translator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_try.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.TryClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.UndefinedFunctionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.UnicodeConversionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.URI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.InvalidRequirementError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.InvalidVersionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Parser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Parser.DSL.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 elixir_with.beam\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ex_unit\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.AssertionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Assertions.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Callbacks.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaptureIO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaptureLog.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Case.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaseTemplate.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CLIFormatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.DocTest.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.DocTest.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.EventManager.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Filters.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Formatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.MultiError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.OnExitHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Runner.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.RunnerStats.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Test.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.TestCase.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.TimeoutError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 ex_unit.app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.App.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Autocomplete.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.CLI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Evaluator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Helpers.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.History.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.History.State.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Any.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.PID.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Reference.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Introspection.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Remsh.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.State.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iex.app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logger\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.App.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Backends.Console.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.ErrorHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Formatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Translator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Watcher.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logger.app\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Archive.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.CLI.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Compilers.Elixir.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Compilers.Erlang.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.Agent.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.LoadError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Converger.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.ElixirSCM.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Fetcher.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Loader.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Lock.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Umbrella.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.ElixirVersionError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Error.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Generator.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Hex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.InvalidTaskError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Local.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.NoProjectError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.NoTaskError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Project.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.ProjectStack.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.PublicKey.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Rebar.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.RemoteConverger.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.Git.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.Path.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.IO.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.Process.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.Quiet.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.State.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Task.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.App.Start.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Build.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Install.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Uninstall.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Clean.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Cmd.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.All.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.App.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Elixir.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Erlang.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Leex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Protocols.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Yecc.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Check.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Clean.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Compile.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Get.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Loadpaths.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Unlock.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Update.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Do.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Escript.Build.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Help.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Iex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Loadconfig.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Loadpaths.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.Hex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.PublicKeys.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.Rebar.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.New.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Profile.Fprof.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Run.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.TasksServer.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Test.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Test.Cover.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Utils.beam\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 mix.app\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 man\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.1.in\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.1.in\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix.1\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 VERSION\n\n15 directories, 368 files",
            "title": "package - elixir"
        },
        {
            "location": "/content/explore/package-elixir/#elixir",
            "text": "\u57f7\u884c  $ tree ~/.asdf/installs/elixir/1.2.2/  \u986f\u793a  /home/user/.asdf/installs/elixir/1.2.2/\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mix\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mix.bat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix.ps1\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eex\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 eex.app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.Compiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.Engine.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.SmartEngine.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.EEx.SyntaxError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Elixir.EEx.Tokenizer.beam\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Access.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Agent.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Agent.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_aliases.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir.app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Application.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ArgumentError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ArithmeticError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadArityError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadFunctionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadMapError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.BadStructError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Base.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Behaviour.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_bitstring.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Bitwise.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_bootstrap.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CaseClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_clauses.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Code.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Code.LoadError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_code_server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Collectable.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CompileError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_compiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.CondClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_counter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def_defaults.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_def_overridable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Dict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_dispatch.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.EmptyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.GenEvent.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enumerable.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Enum.OutOfBoundsError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_env.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ErlangError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_errors.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Exception.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_exp.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_exp_clauses.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.CopyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Stat.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.File.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_fn.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_for.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.FunctionClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenEvent.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenEvent.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.GenServer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_import.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Algebra.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Any.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.HashDict.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.HashSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Opts.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.PID.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Reference.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Regex.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Inspect.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_interpolation.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.Docs.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.ANSI.Sequence.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IO.StreamError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.CLI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ErrorHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.LexicalTracker.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ParallelCompiler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.ParallelRequire.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.SpecialForms.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.Typespec.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Kernel.Utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.KeyError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Keyword.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_lexical.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.List.Chars.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_locals.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Macro.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Macro.Env.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.MapSet.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.MatchError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_module.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Module.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Module.LocalsTracker.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Node.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.OptionParser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_parser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Path.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Path.Wildcard.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Process.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Protocol.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Protocol.UndefinedError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_quote.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Range.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Record.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Record.Extractor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Regex.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Regex.CompileError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_rewrite.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.RuntimeError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_scope.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Set.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Stream.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Stream.Reducers.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.URI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Chars.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Graphemes.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.StringIO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Normalizer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.String.Unicode.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_sup.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.Default.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Supervisor.Spec.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.SyntaxError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.System.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.SystemLimitError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.Supervised.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Task.Supervisor.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_tokenizer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.TokenMissingError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_translator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_try.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.TryClauseError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.UndefinedFunctionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.UnicodeConversionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.URI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elixir_utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.InvalidRequirementError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.InvalidVersionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Parser.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Parser.DSL.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Version.Requirement.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 elixir_with.beam\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ex_unit\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.AssertionError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Assertions.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Callbacks.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaptureIO.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaptureLog.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Case.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CaseTemplate.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.CLIFormatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.DocTest.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.DocTest.Error.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.EventManager.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Filters.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Formatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.MultiError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.OnExitHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Runner.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.RunnerStats.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.Test.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.TestCase.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.ExUnit.TimeoutError.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 ex_unit.app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.App.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Autocomplete.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.CLI.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Evaluator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Helpers.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.History.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.History.State.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Any.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Atom.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.BitString.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Float.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Function.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Integer.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.List.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Map.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.PID.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Port.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Reference.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Info.Tuple.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Introspection.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Remsh.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.Server.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.IEx.State.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iex.app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logger\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.App.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Backends.Console.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Config.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.ErrorHandler.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Formatter.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Translator.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Utils.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Elixir.Logger.Watcher.beam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logger.app\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ebin\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Archive.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.CLI.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Compilers.Elixir.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Compilers.Erlang.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.Agent.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Config.LoadError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Converger.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.ElixirSCM.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Fetcher.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Loader.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Lock.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Dep.Umbrella.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.ElixirVersionError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Error.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Generator.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Hex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.InvalidTaskError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Local.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.NoProjectError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.NoTaskError.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Project.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.ProjectStack.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.PublicKey.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Rebar.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.RemoteConverger.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.Git.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.SCM.Path.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.IO.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.Process.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Shell.Quiet.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.State.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Task.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.App.Start.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Build.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Install.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Archive.Uninstall.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Clean.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Cmd.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.All.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.App.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Elixir.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Erlang.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Leex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Protocols.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Compile.Yecc.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Check.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Clean.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Compile.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Get.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Loadpaths.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Unlock.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Deps.Update.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Do.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Escript.Build.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Help.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Iex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Loadconfig.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Loadpaths.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.Hex.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.PublicKeys.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Local.Rebar.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.New.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Profile.Fprof.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Run.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.TasksServer.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Test.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Tasks.Test.Cover.beam\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Elixir.Mix.Utils.beam\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 mix.app\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 man\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixir.1.in\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 elixirc.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 iex.1.in\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix.1\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 VERSION\n\n15 directories, 368 files",
            "title": "elixir \u5957\u4ef6\u63a2\u7d22"
        },
        {
            "location": "/content/explore/command-iex/",
            "text": "command - iex\n\n\nmanpage\n\n\n\u57f7\u884c\n\n\n$ man ~/.asdf/installs/elixir/1.2.2/man/iex.1\n\n\n\n\n\u986f\u793a\n\n\nIEX(1)                                        BSD General Commands Manual                                       IEX(1)\n\nNAME\n     iex \u2014 The Elixir shell\n\nSYNOPSIS\n     iex [OPTIONS]\n\nDESCRIPTION\n     The interactive shell is used for evaluation, debugging and introspection of the Elixir runtime system. It is\n     also possible to use the program for testing the work of small pieces of code escaping the stage of saving the\n     code in a file.\n\nOPTIONS\n     Note that many of the options mentioned here were borrowed from the Erlang shell, therefore erl(1) can be used as\n     an additional source of information on the options.\n\n     --dot-iex file\n             Loads the specified file instead of .iex.exs (see the FILES section).\n\n     --remsh node\n             Connects to the specified node which was started with the --sname or --name options (see above).\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\nFILES\n     ~/.erlang.cookie\n             Stores the magic cookie value which is used only when it wasn't specified via the option --cookie (see\n             above).  If the file doesn't exist when a node starts, it will be created.\n\n     .iex.exs\n             After iex starts, it seeks the file .iex.exs and, in a case of success, executes the code from the file\n             in the context of the shell. At first the search starts in the current working directory, then, if neces\u2010\n             sary, it continues in the home direcory.\n\nSEE ALSO\n     elixir(1), elixirc(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD\n\n\n\n\nhelp\n\n\n\u57f7\u884c\n\n\n$ iex -h\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ iex --help\n\n\n\n\n\u986f\u793a\n\n\nUsage: iex [options] [.exs file] [data]\n\n  -v                Prints version\n  -e \ncommand\n      Evaluates the given command (*)\n  -r \nfile\n         Requires the given files/patterns (*)\n  -S \nscript\n   \u00a0   Finds and executes the given script\n  -pr \nfile\n        Requires the given files/patterns in parallel (*)\n  -pa \npath\n        Prepends the given path to Erlang code path (*)\n  -pz \npath\n        Appends the given path to Erlang code path (*)\n  --app \napp\n       Start the given app and its dependencies (*)\n  --erl \nswitches\n  Switches to be passed down to Erlang (*)\n  --name \nname\n     Makes and assigns a name to the distributed node\n  --sname \nname\n    Makes and assigns a short name to the distributed node\n  --cookie \ncookie\n Sets a cookie for this distributed node\n  --hidden          Makes a hidden node\n  --werl            Uses Erlang's Windows shell GUI (Windows only)\n  --detached        Starts the Erlang VM detached from console\n  --remsh \nname\n    Connects to a node using a remote shell\n  --dot-iex \npath\n  Overrides default .iex.exs file and uses path instead;\n                    path can be empty, then no file will be loaded\n\n** Options marked with (*) can be given more than once\n** Options given after the .exs file or -- are passed down to the executed code\n** Options can be passed to the VM using ELIXIR_ERL_OPTIONS or --erl",
            "title": "command - iex"
        },
        {
            "location": "/content/explore/command-iex/#command-iex",
            "text": "",
            "title": "command - iex"
        },
        {
            "location": "/content/explore/command-iex/#manpage",
            "text": "\u57f7\u884c  $ man ~/.asdf/installs/elixir/1.2.2/man/iex.1  \u986f\u793a  IEX(1)                                        BSD General Commands Manual                                       IEX(1)\n\nNAME\n     iex \u2014 The Elixir shell\n\nSYNOPSIS\n     iex [OPTIONS]\n\nDESCRIPTION\n     The interactive shell is used for evaluation, debugging and introspection of the Elixir runtime system. It is\n     also possible to use the program for testing the work of small pieces of code escaping the stage of saving the\n     code in a file.\n\nOPTIONS\n     Note that many of the options mentioned here were borrowed from the Erlang shell, therefore erl(1) can be used as\n     an additional source of information on the options.\n\n     --dot-iex file\n             Loads the specified file instead of .iex.exs (see the FILES section).\n\n     --remsh node\n             Connects to the specified node which was started with the --sname or --name options (see above).\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\nFILES\n     ~/.erlang.cookie\n             Stores the magic cookie value which is used only when it wasn't specified via the option --cookie (see\n             above).  If the file doesn't exist when a node starts, it will be created.\n\n     .iex.exs\n             After iex starts, it seeks the file .iex.exs and, in a case of success, executes the code from the file\n             in the context of the shell. At first the search starts in the current working directory, then, if neces\u2010\n             sary, it continues in the home direcory.\n\nSEE ALSO\n     elixir(1), elixirc(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD",
            "title": "manpage"
        },
        {
            "location": "/content/explore/command-iex/#help",
            "text": "\u57f7\u884c  $ iex -h  \u6216\u662f\u57f7\u884c  $ iex --help  \u986f\u793a  Usage: iex [options] [.exs file] [data]\n\n  -v                Prints version\n  -e  command       Evaluates the given command (*)\n  -r  file          Requires the given files/patterns (*)\n  -S  script    \u00a0   Finds and executes the given script\n  -pr  file         Requires the given files/patterns in parallel (*)\n  -pa  path         Prepends the given path to Erlang code path (*)\n  -pz  path         Appends the given path to Erlang code path (*)\n  --app  app        Start the given app and its dependencies (*)\n  --erl  switches   Switches to be passed down to Erlang (*)\n  --name  name      Makes and assigns a name to the distributed node\n  --sname  name     Makes and assigns a short name to the distributed node\n  --cookie  cookie  Sets a cookie for this distributed node\n  --hidden          Makes a hidden node\n  --werl            Uses Erlang's Windows shell GUI (Windows only)\n  --detached        Starts the Erlang VM detached from console\n  --remsh  name     Connects to a node using a remote shell\n  --dot-iex  path   Overrides default .iex.exs file and uses path instead;\n                    path can be empty, then no file will be loaded\n\n** Options marked with (*) can be given more than once\n** Options given after the .exs file or -- are passed down to the executed code\n** Options can be passed to the VM using ELIXIR_ERL_OPTIONS or --erl",
            "title": "help"
        },
        {
            "location": "/content/explore/command-mix/",
            "text": "command - mix\n\n\nmanpage\n\n\n\u57f7\u884c\n\n\n$ man ~/.asdf/installs/elixir/1.2.2/man/mix.1\n\n\n\n\n\u986f\u793a\n\n\nMIX(1)                                        BSD General Commands Manual                                       MIX(1)\n\nNAME\n     mix \u2014 The software project management tool\n\nSYNOPSIS\n     mix [TASK] [project_name]\n     elixir [OPTIONS] -S mix [TASK] [project_name]\n\nDESCRIPTION\n     mix is intended for both organizing code into projects and their maintenance. For the latter the tool offers some\n     advanced features like dependency management, packaging, preparing documentation, testing and so on.\n\n     Have a look at the SYNOPSIS section and the second way of running mix it offers. The point is that the tool is\n     none other than the Elixir script, therefore it can be invoked via elixir(1) in the same way as any other script.\n     It's useful when you want to run mix with particular options.\n\nDEFINITIONS\n     All the mix functionality is represented by a set of tasks. A task is a piece of code written in Elixir and\n     intended for solving a particular problem. Like programs, many tasks accept input parameters and/or support\n     options which slightly modify their behaviour, but others do not. There are two types of tasks: those that are\n     available after installation this or that archive (local tasks) and those that are offered by mix (built-in\n     tasks).  The run task will be executed by default if none other has been specified.\n\n     In spite of the fact that the greater part of mix is tasks, the man page doesn't contain the help information\n     related to each of them because mix is self-descriptive. Thus, using the help task, you can get both the full\n     list of local/built-in tasks and the information related to a particular task.\n\n     An archive, in terms of Erlang, is the ZIP file with the .ez extension which contains a precompiled Erlang appli\u2010\n     cation with all its dependencies[1].\n\n     An application is an entity that helps to combine sets of components into a single unit to simplify their reusing\n     in other systems[2].\n\nENVIRONMENT\n     MIX_ARCHIVE\n             Allows specifying the directory into which the archives should be installed (see mix help\n             archive.install).  The ~/.mix/archives directory is used for this purpose by default.\n\n     MIX_DEBUG\n             When set, outputs debug information about each task before running it.\n\n     MIX_ENV\n             Allows specifying which environment should be used. The dev environment is used by default if none other\n             has been specified.\n\n             Sometimes you have to use a particular set of configuration parameter values or perform particular steps\n             when you compile or run a project (or in some other cases).  The mix environments allow grouping values\n             of configuration parameters and steps to switch between them by specifying the necessary environment via\n             MIX_ENV.\n\n     MIX_EXS\n             Allows changing the full path to the mix.exs file (see FILES section).  The most obvious use case is to\n             have more than one copy of mix.exs in a project, but it's worth noting that MIX_EXS should be used only\n             if the mix environments (see above) are not enough to solve the problem.\n\n     MIX_HOME\n             Stores configuration files and scripts shared by multiple mix implementations.\n\n             See the Mix.Utils.mix_home/0 function.\n\n     MIX_PATH\n             Allows expanding the code path. If the MIX_PATH environment variable has a value which consists of multi\u2010\n             ple paths, they must be colon-separated (for Unix-like operating systems) or semicolon-separated (for\n             Windows).\n\n             As has already been mentioned above, there are two types of tasks: local and built-in. These tasks are\n             always visible for mix because the directories, in which they are located, are a part of code path. If a\n             task belongs to neither the one type nor the other, MIX_PATH helps you say to mix where it should search\n             the task.\n\n             Use the :code.get_path/0 function to get the list of paths which are a part of the code path by default\n             and the Mix.Utils.mix_paths/0 function to get the list of paths specified in the MIX_PATH value.\n\n     MIX_QUIET\n             When set, does not print information messages to the terminal.\n\nFILES\n     mix.exs\n             Contains the most significant information related to the project, such as its name, version, list of\n             dependencies and so on. As a rule, the file is named mix.exs and located at the top of the project's\n             source tree, but you can change the full path to it using the MIX_EXS environment variable (see the\n             ENVIRONMENT section).\n\n     mix.lock\n             Allows locking down the project dependencies with a proper version range before performing any updates.\n             It is useful when you know that your project is incompatible with newer versions of certain dependencies.\n             The file is located at the top of the project's source tree as well as mix.exs (see above).\n\nREFERENCES\n     [1] http://www.erlang.org/doc/man/code.html#id103620\n\n     [2] http://www.erlang.org/doc/design_principles/applications.html\n\nSEE ALSO\n     elixir(1), elixirc(1), iex(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                  May 27, 2015                                                  BSD\n\n\n\n\nhelp\n\n\n\u57f7\u884c\n\n\n$ mix -h\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ mix --help\n\n\n\n\n\u986f\u793a\n\n\nmix                   # Runs the default task (current: \nmix run\n)\nmix app.start         # Starts all registered apps\nmix archive           # Lists all archives\nmix archive.build     # Archives this project into a .ez file\nmix archive.install   # Installs an archive locally\nmix archive.uninstall # Uninstalls archives\nmix clean             # Deletes generated application files\nmix cmd               # Executes the given command\nmix compile           # Compiles source files\nmix deps              # Lists dependencies and their status\nmix deps.clean        # Deletes the given dependencies' files\nmix deps.compile      # Compiles dependencies\nmix deps.get          # Gets all out of date dependencies\nmix deps.unlock       # Unlocks the given dependencies\nmix deps.update       # Updates the given dependencies\nmix do                # Executes the tasks separated by comma\nmix escript.build     # Builds an escript for the project\nmix help              # Prints help information for tasks\nmix hex               # Prints Hex help information\nmix hex.build         # Builds a new package version locally\nmix hex.config        # Reads or updates Hex config\nmix hex.docs          # Publishes docs for package\nmix hex.info          # Prints Hex information\nmix hex.key           # Hex API key tasks\nmix hex.outdated      # Shows outdated Hex deps for the current project\nmix hex.owner         # Hex package ownership tasks\nmix hex.publish       # Publishes a new package version\nmix hex.registry      # Hex registry tasks\nmix hex.search        # Searches for package names\nmix hex.user          # Hex user tasks\nmix loadconfig        # Loads and persists the given configuration\nmix local             # Lists local tasks\nmix local.hex         # Installs Hex locally\nmix local.phoenix     # Updates Phoenix locally\nmix local.public_keys # Manages public keys\nmix local.rebar       # Installs rebar locally\nmix new               # Creates a new Elixir project\nmix phoenix.new       # Creates a new Phoenix v1.1.4 application\nmix profile.fprof     # Profiles the given file or expression with fprof\nmix run               # Runs the given file or expression\nmix test              # Runs a project's tests\niex -S mix            # Starts IEx and run the default task",
            "title": "command - mix"
        },
        {
            "location": "/content/explore/command-mix/#command-mix",
            "text": "",
            "title": "command - mix"
        },
        {
            "location": "/content/explore/command-mix/#manpage",
            "text": "\u57f7\u884c  $ man ~/.asdf/installs/elixir/1.2.2/man/mix.1  \u986f\u793a  MIX(1)                                        BSD General Commands Manual                                       MIX(1)\n\nNAME\n     mix \u2014 The software project management tool\n\nSYNOPSIS\n     mix [TASK] [project_name]\n     elixir [OPTIONS] -S mix [TASK] [project_name]\n\nDESCRIPTION\n     mix is intended for both organizing code into projects and their maintenance. For the latter the tool offers some\n     advanced features like dependency management, packaging, preparing documentation, testing and so on.\n\n     Have a look at the SYNOPSIS section and the second way of running mix it offers. The point is that the tool is\n     none other than the Elixir script, therefore it can be invoked via elixir(1) in the same way as any other script.\n     It's useful when you want to run mix with particular options.\n\nDEFINITIONS\n     All the mix functionality is represented by a set of tasks. A task is a piece of code written in Elixir and\n     intended for solving a particular problem. Like programs, many tasks accept input parameters and/or support\n     options which slightly modify their behaviour, but others do not. There are two types of tasks: those that are\n     available after installation this or that archive (local tasks) and those that are offered by mix (built-in\n     tasks).  The run task will be executed by default if none other has been specified.\n\n     In spite of the fact that the greater part of mix is tasks, the man page doesn't contain the help information\n     related to each of them because mix is self-descriptive. Thus, using the help task, you can get both the full\n     list of local/built-in tasks and the information related to a particular task.\n\n     An archive, in terms of Erlang, is the ZIP file with the .ez extension which contains a precompiled Erlang appli\u2010\n     cation with all its dependencies[1].\n\n     An application is an entity that helps to combine sets of components into a single unit to simplify their reusing\n     in other systems[2].\n\nENVIRONMENT\n     MIX_ARCHIVE\n             Allows specifying the directory into which the archives should be installed (see mix help\n             archive.install).  The ~/.mix/archives directory is used for this purpose by default.\n\n     MIX_DEBUG\n             When set, outputs debug information about each task before running it.\n\n     MIX_ENV\n             Allows specifying which environment should be used. The dev environment is used by default if none other\n             has been specified.\n\n             Sometimes you have to use a particular set of configuration parameter values or perform particular steps\n             when you compile or run a project (or in some other cases).  The mix environments allow grouping values\n             of configuration parameters and steps to switch between them by specifying the necessary environment via\n             MIX_ENV.\n\n     MIX_EXS\n             Allows changing the full path to the mix.exs file (see FILES section).  The most obvious use case is to\n             have more than one copy of mix.exs in a project, but it's worth noting that MIX_EXS should be used only\n             if the mix environments (see above) are not enough to solve the problem.\n\n     MIX_HOME\n             Stores configuration files and scripts shared by multiple mix implementations.\n\n             See the Mix.Utils.mix_home/0 function.\n\n     MIX_PATH\n             Allows expanding the code path. If the MIX_PATH environment variable has a value which consists of multi\u2010\n             ple paths, they must be colon-separated (for Unix-like operating systems) or semicolon-separated (for\n             Windows).\n\n             As has already been mentioned above, there are two types of tasks: local and built-in. These tasks are\n             always visible for mix because the directories, in which they are located, are a part of code path. If a\n             task belongs to neither the one type nor the other, MIX_PATH helps you say to mix where it should search\n             the task.\n\n             Use the :code.get_path/0 function to get the list of paths which are a part of the code path by default\n             and the Mix.Utils.mix_paths/0 function to get the list of paths specified in the MIX_PATH value.\n\n     MIX_QUIET\n             When set, does not print information messages to the terminal.\n\nFILES\n     mix.exs\n             Contains the most significant information related to the project, such as its name, version, list of\n             dependencies and so on. As a rule, the file is named mix.exs and located at the top of the project's\n             source tree, but you can change the full path to it using the MIX_EXS environment variable (see the\n             ENVIRONMENT section).\n\n     mix.lock\n             Allows locking down the project dependencies with a proper version range before performing any updates.\n             It is useful when you know that your project is incompatible with newer versions of certain dependencies.\n             The file is located at the top of the project's source tree as well as mix.exs (see above).\n\nREFERENCES\n     [1] http://www.erlang.org/doc/man/code.html#id103620\n\n     [2] http://www.erlang.org/doc/design_principles/applications.html\n\nSEE ALSO\n     elixir(1), elixirc(1), iex(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                  May 27, 2015                                                  BSD",
            "title": "manpage"
        },
        {
            "location": "/content/explore/command-mix/#help",
            "text": "\u57f7\u884c  $ mix -h  \u6216\u662f\u57f7\u884c  $ mix --help  \u986f\u793a  mix                   # Runs the default task (current:  mix run )\nmix app.start         # Starts all registered apps\nmix archive           # Lists all archives\nmix archive.build     # Archives this project into a .ez file\nmix archive.install   # Installs an archive locally\nmix archive.uninstall # Uninstalls archives\nmix clean             # Deletes generated application files\nmix cmd               # Executes the given command\nmix compile           # Compiles source files\nmix deps              # Lists dependencies and their status\nmix deps.clean        # Deletes the given dependencies' files\nmix deps.compile      # Compiles dependencies\nmix deps.get          # Gets all out of date dependencies\nmix deps.unlock       # Unlocks the given dependencies\nmix deps.update       # Updates the given dependencies\nmix do                # Executes the tasks separated by comma\nmix escript.build     # Builds an escript for the project\nmix help              # Prints help information for tasks\nmix hex               # Prints Hex help information\nmix hex.build         # Builds a new package version locally\nmix hex.config        # Reads or updates Hex config\nmix hex.docs          # Publishes docs for package\nmix hex.info          # Prints Hex information\nmix hex.key           # Hex API key tasks\nmix hex.outdated      # Shows outdated Hex deps for the current project\nmix hex.owner         # Hex package ownership tasks\nmix hex.publish       # Publishes a new package version\nmix hex.registry      # Hex registry tasks\nmix hex.search        # Searches for package names\nmix hex.user          # Hex user tasks\nmix loadconfig        # Loads and persists the given configuration\nmix local             # Lists local tasks\nmix local.hex         # Installs Hex locally\nmix local.phoenix     # Updates Phoenix locally\nmix local.public_keys # Manages public keys\nmix local.rebar       # Installs rebar locally\nmix new               # Creates a new Elixir project\nmix phoenix.new       # Creates a new Phoenix v1.1.4 application\nmix profile.fprof     # Profiles the given file or expression with fprof\nmix run               # Runs the given file or expression\nmix test              # Runs a project's tests\niex -S mix            # Starts IEx and run the default task",
            "title": "help"
        },
        {
            "location": "/content/explore/command-elixir/",
            "text": "command - elixir\n\n\nmanpage\n\n\n\u57f7\u884c\n\n\n$ man ~/.asdf/installs/elixir/1.2.2/man/elixir.1\n\n\n\n\n\u986f\u793a\n\n\nELIXIR(1)                                     BSD General Commands Manual                                    ELIXIR(1)\n\nNAME\n     elixir \u2014 The Elixir script runner\n\nSYNOPSIS\n     elixir [OPTIONS] file ...\n\nDESCRIPTION\n     The program starts the runtime system typically for the execution of one or more scripts. It is similar to\n     iex(1), but elixir exits when the executed script does.\n\nOPTIONS\n     Note that many of the options mentioned here were borrowed from the Erlang shell, therefore erl(1) can be used as\n     an additional source of information on the options.\n\n     --no-halt\n             Does not halt the Erlang VM after execution.\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\nFILES\n     ~/.erlang.cookie\n             Stores the magic cookie value which is used only when it wasn't specified via the option --cookie (see\n             above).  If the file doesn't exist when a node starts, it will be created.\n\nSEE ALSO\n     elixirc(1), iex(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD\n\n\n\n\nhelp\n\n\n\u57f7\u884c\n\n\n$ elixir -h\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ elixir --help\n\n\n\n\n\u986f\u793a\n\n\nUsage: elixir [options] [.exs file] [data]\n\n  -v                Prints version and exits\n  -e \ncommand\n      Evaluates the given command (*)\n  -r \nfile\n         Requires the given files/patterns (*)\n  -S \nscript\n   \u00a0   Finds and executes the given script\n  -pr \nfile\n        Requires the given files/patterns in parallel (*)\n  -pa \npath\n        Prepends the given path to Erlang code path (*)\n  -pz \npath\n        Appends the given path to Erlang code path (*)\n  --app \napp\n       Start the given app and its dependencies (*)\n  --erl \nswitches\n  Switches to be passed down to Erlang (*)\n  --name \nname\n     Makes and assigns a name to the distributed node\n  --sname \nname\n    Makes and assigns a short name to the distributed node\n  --cookie \ncookie\n Sets a cookie for this distributed node\n  --hidden          Makes a hidden node\n  --detached        Starts the Erlang VM detached from console\n  --werl            Uses Erlang's Windows shell GUI (Windows only)\n  --no-halt         Does not halt the Erlang VM after execution\n\n** Options marked with (*) can be given more than once\n** Options given after the .exs file or -- are passed down to the executed code\n** Options can be passed to the Erlang runtime using ELIXIR_ERL_OPTIONS or --erl",
            "title": "command - elixir"
        },
        {
            "location": "/content/explore/command-elixir/#command-elixir",
            "text": "",
            "title": "command - elixir"
        },
        {
            "location": "/content/explore/command-elixir/#manpage",
            "text": "\u57f7\u884c  $ man ~/.asdf/installs/elixir/1.2.2/man/elixir.1  \u986f\u793a  ELIXIR(1)                                     BSD General Commands Manual                                    ELIXIR(1)\n\nNAME\n     elixir \u2014 The Elixir script runner\n\nSYNOPSIS\n     elixir [OPTIONS] file ...\n\nDESCRIPTION\n     The program starts the runtime system typically for the execution of one or more scripts. It is similar to\n     iex(1), but elixir exits when the executed script does.\n\nOPTIONS\n     Note that many of the options mentioned here were borrowed from the Erlang shell, therefore erl(1) can be used as\n     an additional source of information on the options.\n\n     --no-halt\n             Does not halt the Erlang VM after execution.\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\nFILES\n     ~/.erlang.cookie\n             Stores the magic cookie value which is used only when it wasn't specified via the option --cookie (see\n             above).  If the file doesn't exist when a node starts, it will be created.\n\nSEE ALSO\n     elixirc(1), iex(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD",
            "title": "manpage"
        },
        {
            "location": "/content/explore/command-elixir/#help",
            "text": "\u57f7\u884c  $ elixir -h  \u6216\u662f\u57f7\u884c  $ elixir --help  \u986f\u793a  Usage: elixir [options] [.exs file] [data]\n\n  -v                Prints version and exits\n  -e  command       Evaluates the given command (*)\n  -r  file          Requires the given files/patterns (*)\n  -S  script    \u00a0   Finds and executes the given script\n  -pr  file         Requires the given files/patterns in parallel (*)\n  -pa  path         Prepends the given path to Erlang code path (*)\n  -pz  path         Appends the given path to Erlang code path (*)\n  --app  app        Start the given app and its dependencies (*)\n  --erl  switches   Switches to be passed down to Erlang (*)\n  --name  name      Makes and assigns a name to the distributed node\n  --sname  name     Makes and assigns a short name to the distributed node\n  --cookie  cookie  Sets a cookie for this distributed node\n  --hidden          Makes a hidden node\n  --detached        Starts the Erlang VM detached from console\n  --werl            Uses Erlang's Windows shell GUI (Windows only)\n  --no-halt         Does not halt the Erlang VM after execution\n\n** Options marked with (*) can be given more than once\n** Options given after the .exs file or -- are passed down to the executed code\n** Options can be passed to the Erlang runtime using ELIXIR_ERL_OPTIONS or --erl",
            "title": "help"
        },
        {
            "location": "/content/explore/command-elixirc/",
            "text": "command - elixirc\n\n\n\u57f7\u884c\n\n\n$ man ~/.asdf/installs/elixir/1.2.2/man/elixirc.1\n\n\n\n\n\u986f\u793a\n\n\nELIXIRC(1)                                    BSD General Commands Manual                                   ELIXIRC(1)\n\nNAME\n     elixirc \u2014 The Elixir compiler\n\nSYNOPSIS\n     elixirc [OPTIONS] file ...\n\nDESCRIPTION\n     The compiler is intended for compilation one or more files containing the Elixir source code. The files should\n     have the extension .ex.\n\nOPTIONS\n     -o directory\n             Places the output file in the specified directory. If the directory is not specified via the option, the\n             current working directory will be used for the purpose.\n\n     --erl parameters\n             Serves the same purpose as ELIXIR_ERL_OPTIONS (see the ENVIRONMENT section).\n\n     --ignore-module-conflict\n             Disables warnings when a module was previously defined.\n\n     --no-debug-info\n             Disables producing debugging information.\n\n     --no-docs\n             Disables generating documentation.\n\n     --warnings-as-errors\n             Makes all warnings into errors.\n\n     --verbose\n             Activates verbose mode.\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\n     ERL_COMPILER_OPTIONS\n             Allows passing parameters to the Erlang compiler (see erlc(1)).\n\nSEE ALSO\n     elixir(1), iex(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD\n\n\n\n\nhelp\n\n\n\u57f7\u884c\n\n\n$ elixirc -h\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ elixirc --help\n\n\n\n\n\u986f\u793a\n\n\nUsage: elixirc [elixir switches] [compiler switches] [.ex files]\n\n  -o               The directory to output compiled files\n  --no-docs        Do not attach documentation to compiled modules\n  --no-debug-info  Do not attach debug info to compiled modules\n  --ignore-module-conflict\n  --warnings-as-errors Treat warnings as errors and return non-zero exit code\n  --verbose        Print informational messages.\n\n** Options given after -- are passed down to the executed code\n** Options can be passed to the erlang runtime using ELIXIR_ERL_OPTIONS\n** Options can be passed to the erlang compiler using ERL_COMPILER_OPTIONS",
            "title": "command - elixirc"
        },
        {
            "location": "/content/explore/command-elixirc/#command-elixirc",
            "text": "\u57f7\u884c  $ man ~/.asdf/installs/elixir/1.2.2/man/elixirc.1  \u986f\u793a  ELIXIRC(1)                                    BSD General Commands Manual                                   ELIXIRC(1)\n\nNAME\n     elixirc \u2014 The Elixir compiler\n\nSYNOPSIS\n     elixirc [OPTIONS] file ...\n\nDESCRIPTION\n     The compiler is intended for compilation one or more files containing the Elixir source code. The files should\n     have the extension .ex.\n\nOPTIONS\n     -o directory\n             Places the output file in the specified directory. If the directory is not specified via the option, the\n             current working directory will be used for the purpose.\n\n     --erl parameters\n             Serves the same purpose as ELIXIR_ERL_OPTIONS (see the ENVIRONMENT section).\n\n     --ignore-module-conflict\n             Disables warnings when a module was previously defined.\n\n     --no-debug-info\n             Disables producing debugging information.\n\n     --no-docs\n             Disables generating documentation.\n\n     --warnings-as-errors\n             Makes all warnings into errors.\n\n     --verbose\n             Activates verbose mode.\n\n     --      Separates the options passed to the compiler from the options passed to the executed code.\n\nENVIRONMENT\n     ELIXIR_ERL_OPTIONS\n             Allows passing parameters to the Erlang runtime.\n\n     ERL_COMPILER_OPTIONS\n             Allows passing parameters to the Erlang compiler (see erlc(1)).\n\nSEE ALSO\n     elixir(1), iex(1), mix(1)\n\nAUTHOR\n     This manual page contributed by Evgeny Golyshev.\n\nINTERNET RESOURCES\n     Main website: http://elixir-lang.org\n\n     Documentation: http://elixir-lang.org/docs.html\n\n     General Mailing List: https://groups.google.com/group/elixir-lang-talk\n\n     Development Mailing List: https://groups.google.com/group/elixir-lang-core\n\nBSD                                                 April 10, 2015                                                 BSD",
            "title": "command - elixirc"
        },
        {
            "location": "/content/explore/command-elixirc/#help",
            "text": "\u57f7\u884c  $ elixirc -h  \u6216\u662f\u57f7\u884c  $ elixirc --help  \u986f\u793a  Usage: elixirc [elixir switches] [compiler switches] [.ex files]\n\n  -o               The directory to output compiled files\n  --no-docs        Do not attach documentation to compiled modules\n  --no-debug-info  Do not attach debug info to compiled modules\n  --ignore-module-conflict\n  --warnings-as-errors Treat warnings as errors and return non-zero exit code\n  --verbose        Print informational messages.\n\n** Options given after -- are passed down to the executed code\n** Options can be passed to the erlang runtime using ELIXIR_ERL_OPTIONS\n** Options can be passed to the erlang compiler using ERL_COMPILER_OPTIONS",
            "title": "help"
        }
    ]
}